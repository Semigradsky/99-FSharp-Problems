%{

open Ast

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
//%token <System.Int32> INT32
//%token <System.Double> FLOAT
%token <System.String> IDENTIFIER
//%token PLUS MINUS ASTER	SLASH
//%token LPAREN RPAREN
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Ast.Expr > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  In this case the actions 
// produce data using F# data construction terms.
start: Prog { Identifier($1) }

Prog:
    | IDENTIFIER EOF					{ $1 }
